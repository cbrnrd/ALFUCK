#!/usr/bin/env ruby
require 'optparse'

# Check environment stuff
if ENV['PATH'].include? "alfuck"
  puts "Do not run alfuck while outside of its respective directory!"
  exit 1
end

@verb = false
options = {}
parser = OptionParser.new do |opts|
  opts.banner = "\nUsage #{ARGV[0]} -i <infile> -o <outfile> [opts]"

  opts.separator("\nRequired options:")

  opts.on('-i', '--infile FILE','The input alphuck file', String) do |infile|
    options[:infile] = infile
  end

  opts.on('-o', '--outfile FILE', 'The output brainfuck file', String) do |outfile|
    options[:outfile] = outfile
  end

  opts.separator("\nAdditional options:")

  opts.on('-v', '--verbose', 'Use verbose output') do |x|
    @verb = x
  end

  opts.on('--keep-newlines', 'Keep the newlines from the original file') do |keepnewlines|
    options[:keep_newlines] = keepnewlines
  end

  opts.on('-e', '--executable', 'Compile the source file to an executable (gcc & php required)') do |compile|
    if $RUBY_PLATFORM == "x86_64-linux"
      options[:compile] = compile
    else
      options[:compile] = false
      puts "\033[31m\033[1m64 bit linux is required for compilation,\noutputting script\033[0m\033[22m"
    end
  end

  opts.on('--from-bf', 'Translate from brainfuck instead of to it') do |to_bf|
    options[:tobf] = to_bf
  end

  opts.on('--lotrize', '\'Lotrize\' the output script') do |lotr|
    options[:lotrize] = lotr
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

parser.parse!

if options[:tobf]
  if !options[:infile].include? '.af'
    puts 'Input ALFUCK file must have a .af extension!'
    exit 1
  end

  if !options[:outfile].include? '.b' || !options[:outfile].include? '.bf'
    puts 'Output file must have a .b or .bf extension!'
    exit 1
  end
end

if !options[:infile] || !options[:outfile]
  puts "\033[31m\033[1m-i and -o are required!\033[0m\033[22m"
  exit 1
end
#p options

dict = 
{
  'l' => '<',
  'r' => '>',
  'a' => '+',
  's' => '-',
  'o' => '.',
  'i' => ',',
  '\\' => '[',
  '/' => ']'
}

bf_to_af_dict =
{
  '<' => 'l',
  '>' => 'r',
  '+' => 'a',
  '-' => 's',
  '.' => 'o',
  ',' => 'i',
  '[' => '\\',
  ']' => '/'
}

lotr_dict =
{
  '<' => "Legolas;\n",
  '>' => "Ring Wraith;\n",
  '+' => "Aragorn;\n",
  '-' => "Sauron;\n",
  '.' => "Oakenshield;\n",
  ',' => "Isildur;\n",
  '[' => "Bilbo;\n",
  ']' => "Baggins;\n"
}

infile = File.new(options[:infile], 'r')
outfile = File.new(options[:outfile], 'w')
if options[:lotrize]
  puts "A wizard is never late ;)"
end
infile.each_char { |chr|
  if options[:keep_newlines] && chr == "\n"
    outfile.write("\n")
    next
  end
  if options[:lotrize]
    if dict.include? chr
      outfile.write(lotr_dict[chr])
      next
    end
  end

  if bf_to_af_dict.include? chr
    outfile.write(bf_to_af_dict[chr])
    next
  end
  
  if dict.include? chr
    outfile.write(dict[chr])
    next
  else
    if @verb && (chr != "\n" || chr != "\r" || /[\\*.?]/.match(chr))  # I think this regex works
      puts "Skipping invalid character \'#{chr}\'"
    end
    next
  end
}

if options[:compile]
  puts "Compiling file..."
  Process.exec("bash ../util/compile.sh #{options[:infile]} #{options[:outfile]}")
end

# Ensure this always happens
outfile.close
infile.close
